/*@
<p>The Community Power Accelerator (CPA) macro is available for the PVWatts and PVWatts Battery 
performance models with the following financial models:</p>

<ul>
<li>Commercial</li>
<li>Community Solar (not available with battery storage)</li>
<li>Third Party Ownership Host/Developer</li>
</ul>

<p>
<table><tr><td style="background-color:#ffff99">
<strong>Note.</strong> This 
macro is an initial implementation intended as a proof-of-concept. If you have 
questions or suggestions for improving the macro, please contact us at 
<a href="mailto:sam.support@nrel.gov">sam.support@nrel.gov</a>.
</td></tr></table>
</p>

<p>This macro generates reports showing annual CPA meaningful benefits based on
the SAM model inputs for the current case and four CPA macro parameters. Table 1 
below describes the inputs and parameters used to calculate each benefit.
The macro automatically calculates the value of the SAM input used to represent
each benefit.</p>

<p>
<table border cellpadding=5 width="100%">
<caption><strong>Table 1. Meaningful Benefits Calculated by CPA Macro</strong></caption>
<tr><th>Benefit</th><th>SAM Input Variable Name</th><th>SAM Input Page</th><th>CPA Macro Parameter</th></tr>
<tr><td>Energy savings to subscriber</td><td>Subscriber bill credit ($/yr)</td><td>Community Solar</td><td>Energy savings to subscriber ($/kWh)</td></tr>
<tr><td>Lease payments to owner</td><td>Fixed annual cost ($/yr)</td><td>Operating Costs</td><td>Lease payment to owner ($/yr)</td></tr>
<tr><td>Community benefits payments</td><td>Recurring annual fixed cost ($/yr)</td><td>Community Solar</td><td>Sum of community benefits payment ($/yr) and job training value ($/yr></td></tr>
<tr><td>Job training</td><td>Recurring annual fixed cost ($/yr)</td><td>Community Solar</td><td>Sum of community benefits payment ($/yr) and job training value ($/yr)</td></tr>
</table>
</p>

<p>To use the macro:</p>
<ol>
<li>Review inputs on the SAM inputs page and modify as appropriate for the project you are modeling.</li>
<li>Type a value for each of the four CPA macro parameters at the top right of this window.</li>
<li>Click <strong>Run macro</strong>.</li>
<li>The macro will prompt you to choose a folder to save the PDF file. If there is a file from a previous run, it will prompt you to delete or rename the file before running the macro.</li>
</ol>

<p>The macro sets values of SAM inputs listed in Table 1 based on the macro 
parameters, runs a SAM simulation, and generates a set of reports in different 
formats. When the macro finishes, you should see the following:</p>

<ul>
<li>A PDF file with a summary of performance metrics and a table of annual benefits.</li>
<li>A window with a table of total and annual benefits over the anlysis period.</li>
<li>In Windows, an Excel file with the project cash flow from the SAM simulation. (Not available for Mac or Linux.)</li>
<li>SAM's Results page where you can explore the effect of the macro parameters on the financial metrics and cash flow.</li>
</ul>

@*/


//@ name=energysavings;type=number;label=Energy savings to subscriber ($/kWh);value=0.1
//@ name=leasepayment;type=number;label=Lease payment to owner ($/yr):;value=50000
//@ name=communitybenefitspayments;type=number;label=Community benefits payment ($/yr):;value=5000
//@ name=jobtraining;type=number;label=Job training value ($/yr):;value=25000

// Now use template file
/*************************************/
/**           Runtime Tools         **/

// Save the current dir for later use
curDir = userlocaldatadir();
//outln( curDir );

// Determine screen size and set default pop-up positions

scrn = scrnres();

defaultX = scrn[0] - scrn[0]/2;
defaultY = 60;

// exit function (and removes any highlighting)
function exitIf( exitCondition ){
	if( exitCondition ){
		transp();
		exit;
	}
}

function send_excel( xl, variable)
{
	xl_set( xl, value(variable), variable );
}

if ( typeof(macro) == 'unknown' ) 
{
	msgbox('This macro must be run from within a case.');
	exit;
}	
energysavings = macro.energysavings; 
leasepayment = macro.leasepayment; 
communitybenefitspayments = macro.communitybenefitspayments;
jobtraining = macro.jobtraining;


caseName = case_name();
exitIf(caseName == "");


exitIf(energysavings == '');
x=alloc(1);
x[0] = to_real(energysavings);
set('subscriber1_bill_credit_rate', x );

exitIf(leasepayment == '');
x[0] = to_real(leasepayment);
// 7/2/2025-lease payment is cost to project and changed to fixed_om 
//set('subscriber1_payment_annual', x );
set('om_fixed', x );

exitIf(communitybenefitspayments == '');
x[0] = to_real(communitybenefitspayments);
exitIf(jobtraining == '');
x[0] += to_real(jobtraining);

set('cs_cost_recurring_fixed', x );


/*************************************/
/**            Simulate             **/

// simulate
simulate('',true);
outln("Simulation finished");
/*************************************/
/**            Outputs              **/

// create HTML table showing Benefits
case = case_name();

/* cash flow line items from Community Solar outputs with 
1.	Energy savings to subscriber  (Bill credits)
2.	Lease payment to owner (subscription revenue)
3.	Community benefits payments (upfront and recurring)
4.	Job training (upfront and recurring)
*/

fixedjobtraining = to_real(jobtraining);
fixedcommunitybenefitspayments = to_real(communitybenefitspayments);
fixedtotal = fixedjobtraining + fixedcommunitybenefitspayments;

//write_text_file(runtimedir() + 'quickstart/CPA-example_multipliers.txt', fixedcommunitybenefitspayments + " " + fixedjobtraining + " " + fixedtotal);
data = {'fixedjobtraining' = fixedjobtraining, 'fixedcommunitybenefitspayments' = fixedcommunitybenefitspayments, 'fixedtotal' = fixedtotal};

varbenefits = ['Energy savings to subscriber','Lease payments to owner','Community benefits payments','Job training'];
// 7/2/2025 meeting Lease payment to owner is cf_om_fixed
//varcf = ["cf_subscriber1_bill_credit_amount","cf_community_solar_subscriber1_revenue","cf_community_solar_recurring_fixed","cf_community_solar_recurring_fixed"];
varcf = ["cf_subscriber1_bill_credit_amount","cf_om_fixed_expense","cf_community_solar_recurring_fixed","cf_community_solar_recurring_fixed"];
varmultiplier = [1.0,1.0,fixedcommunitybenefitspayments/fixedtotal,fixedjobtraining/fixedtotal];

// html table

ap = round(to_real(get('analysis_period')));

str_html = '<table bgcolor=#dddddd width=100%>';

// header rows
str_html += '<tr>';
str_html += '<th rowspan="2">Benefit</th>';
str_html += '<th rowspan="2">Total</th>'; // Total added based on 7/2/2025 meeting
str_html += '<th colspan="' + sprintf("%d",ap) + '">Year</th>';
str_html += '</tr>';
str_html += '<tr>';
for (i=0;i<=ap;i++)
{
	str_html +=  '<th>' + sprintf("%d",i) + '</th>';
}
str_html += '</tr>';

// data rows
for (i=0;i<#varcf;i++)
{
	str_html += '<tr  bgcolor=#ffffff><td align="left">' + varbenefits[i] + '</td>';
	cfline = get(varcf[i]);
	// add sum per 7/2/2025 meeting
	str_html += '<td align="right">' + sprintf('$%,',round(varmultiplier[i] * sum(cfline))) + '</td>';
	
	for (j=0; j<#cfline; j++)
	{
		str_html += '<td align="right">' + sprintf('$%,',round(varmultiplier[i] * cfline[j])) + '</td>';
	}
	str_html += '</tr>';
}
str_html +=  '</table></body></html>';

// display outputs

// pdf report
path = choose_dir( homedir(),'Choose a folder for the PDF report');
fname = 'CPA-benefits-report_' + case_name();
reportFile = path + '/' + fname + '.pdf';

if ( file_exists( reportFile ) ) {
	msgbox('PDF File Exists.\nDelete or rename the file and then re-run the macro to generate the report.\n\n' + reportFile);
	outln('Failed to export PDF report to ' + reportFile + '. File already exists.');
}
else {
	ok = pdfreport( reportFile, {'template'=runtimedir() + 'quickstart/CPA-CommunitySolar.samreport', 'metadata'=data });

	if ( ok ) {
		outln('PDF report exported to ' + reportFile );
		browse(reportFile);
	}
	else {
		outln('Failed to export PDF report to ' + reportFile + '.');
	}
}

// annual benefits as html table
html_dialog ( str_html , 'Benefits for "' + case + '" Case' , [300,300,800,400]);
outln("Benefits table displayed in window.");

// export cashflow to Excel
ok = export_cashflow_excel();

if ( ok ) {
	outln('SAM cash flow open in Excel.');
}
