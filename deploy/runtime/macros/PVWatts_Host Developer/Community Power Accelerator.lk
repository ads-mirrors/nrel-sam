/*@

<p>The Community Power Accelerator (CPA) macro is available for the PVWatts and PVWatts Battery 
performance models with the following financial models:</p>

<ul>
<li>Commercial</li>
<li>Community Solar (not available with battery storage)</li>
<li>Third Party Ownership Host/Developer</li>
</ul>

<p>
<table><tr><td style="background-color:#ffff99">
<strong>Note.</strong>This macro is an initial implementation intended as a 
proof-of-concept. If you have questions or suggestions for improving the macro, 
please contact us at <a href="mailto:sam.support@nrel.gov">sam.support@nrel.gov</a>.
</td></tr></table>
</p>
<p>This macro generates reports showing annual CPA meaningful benefits based on
the SAM model inputs for the current case and two CPA macro parameters. Table 1 
below describes the inputs and parameters used to calculate each benefit.
The macro automatically calculates the value of the SAM input used to represent
each benefit.</p>

<p>
<table border cellpadding=5 width="100%">
<caption><strong>Table 1. Meaningful Benefits Calculated by CPA Macro. *The macro adds the sum of the two macro parameters to SAM's fixed operating cost input.</strong></caption>
<tr><th>Benefit</th><th>SAM Input Variable Name</th><th>SAM Input Page</th><th>CPA Macro Parameter</th></tr>
<tr><td>Community benefits payments</td><td>Fixed annual cost* ($/yr)</td><td>Operating Costs</td><td>Community benefits payment ($/yr)</td></tr>
<tr><td>Job training</td><td>Fixed annual cost* ($/yr)</td><td>Operating Costs</td><td>Job training value ($/yr)</td></tr>
</table>
</p>

<p>To use the macro:</p>
<ol>
<li>Review inputs on the SAM inputs page and modify as appropriate for the project you are modeling.</li>
<li>Type a value for each of the two CPA macro parameters at the top right of this window.</li>
<li>Click <strong>Run macro</strong>.</li>
<li>The macro will prompt you to choose a folder to save the PDF file. If there is a file from a previous run, it will prompt you to delete or rename the file before running the macro.</li>
</ol>

<p>The macro sets values of SAM inputs listed in Table 1 based on the macro 
parameters, runs a SAM simulation, and generates a set of reports in different 
formats. When the macro finishes, you should see the following:</p>

<ul>
<li>A PDF file with a summary of performance metrics and a table of annual benefits.</li>
<li>A window with a table of total and annual benefits over the anlysis period.</li>
<li>In Windows, an Excel file with the project cash flow from the SAM simulation. (Not available for Mac or Linux.)</li>
<li>SAM's Results page where you can explore the effect of the macro parameters on the financial metrics and cash flow.</li>
</ul>

@*/

//@ name=communitybenefitspayments;type=number;label=Community benefits payment ($/yr):;value=5000
//@ name=jobtraining;type=number;label=Job training value ($/yr):;value=25000

if ( typeof(macro) == 'unknown' ) 
{
	msgbox('This macro must be run from within a case.');
	exit;
}

outln('Running...');

communitybenefitspayments = macro.communitybenefitspayments;
jobtraining = macro.jobtraining;

x[0] = to_real(communitybenefitspayments);
x[0] += to_real(jobtraining);

set('om_fixed', x );

// simulate
outln('Simulating...');
simulate('',true);

/* cash flow line items from Third Party outputs with 
1.	Energy savings to subscriber  (Bill credits)
2.	Community benefits payments (upfront and recurring)
3.	Job training (upfront and recurring)
*/

outln('Generating reports...');

// store variables for reports
fixedjobtraining = to_real(jobtraining);
fixedcommunitybenefitspayments = to_real(communitybenefitspayments);
fixedtotal = fixedjobtraining + fixedcommunitybenefitspayments;

data = {'fixedjobtraining' = fixedjobtraining, 'fixedcommunitybenefitspayments' = fixedcommunitybenefitspayments, 'fixedtotal' = fixedtotal};

// variables for html table
varbenefits = ['Energy savings to beneficiary','Community benefits payments','Job training'];
varcf = ['cf_energy_value','cf_om_fixed_expense','cf_om_fixed_expense'];
varmultiplier = [1.0,fixedcommunitybenefitspayments/fixedtotal,fixedjobtraining/fixedtotal];

ap = round(to_real(get('analysis_period')));

// html table
str_html = '<table bgcolor=#dddddd width=100%>';

// header rows
str_html += '<tr>';
str_html += '<th>Benefit</th>';
str_html += '<th>Lifetime Total</th>';
for (i=0;i<=ap;i++)
{
	str_html +=  '<th>Year ' + sprintf("%d",i) + '</th>';
}
str_html += '</tr>';

// data rows
for (i=0;i<#varcf;i++)
{
	str_html += '<tr  bgcolor=#ffffff><td align="left">' + varbenefits[i] + '</td>';
	cfline = get(varcf[i]);
	str_html += '<td align="right">' + sprintf('$%,',round(varmultiplier[i] * sum(cfline))) + '</td>'; // lifetime total
	for (j=0; j<#cfline; j++)
	{
		str_html += '<td align="right">' + sprintf('$%,',round(varmultiplier[i] * cfline[j])) + '</td>'; // annual
	}
	str_html += '</tr>';
}
str_html +=  '</table></body></html>';

// generate and display pdf report
path = choose_dir( homedir(),'Choose a folder for the PDF report');
fname = 'CPA-benefits-report_' + case_name();
f = path + '/' + fname + '.pdf';

if ( file_exists( f ) ) {
	msgbox('PDF File Exists.\nDelete or rename the file and then re-run the macro to generate the report.\n\n' + f);
	outln('Failed to export PDF report to ' + f + '. File already exists.');
}
else {
	ok = pdfreport( f, {'template'=runtimedir() + 'reports/cpa.samreport', 'metadata'=data });

	if ( ok ) {
		outln('PDF report exported to ' + f );
		browse(f);
	}
	else {
		outln('Failed to export PDF report to ' + f + '.');
	}
}

// display html table
html_dialog ( str_html , 'Benefits for "' + case_name() + '" Case' , [300,300,800,400]);

// export cashflow to Excel (Windows only)
ok =  export_cashflow_excel();
if (!ok) {
	outln('Failed to export cash flow to Excel.');
}

outln('Finished.');